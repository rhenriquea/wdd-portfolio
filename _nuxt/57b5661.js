(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{223:function(e,t,n){"use strict";n.r(t);var o=n(17),component=Object(o.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("h1",[e._v("Week03")]),e._v(" "),n("p",[e._v("\n    This week I will show some manipulation of events in the DOM and the difference between JS\n    Classes and JS Objects.\n  ")]),e._v(" "),n("p",[e._v("Find an example below ðŸ‘‡")]),e._v(" "),n("h2",[e._v("Javascript Objects vs Javascript Classes")]),e._v(" "),n("p",[e._v("\n    Although both may look very similar in the implementation, the concept of Classes and Objects\n    in Javascript are very distinct.\n  ")]),e._v(" "),n("h3",[e._v("Javascript Objects")]),e._v(" "),n("blockquote",[e._v("\n    Basically, javaScript objects are containers for "),n("strong",[e._v("named values")]),e._v(" called\n    properties or methods, and a "),n("strong",[e._v("method")]),e._v(" is a function stored as a property.\n  ")]),e._v(" "),n("p",[e._v("An example of Object would be:")]),e._v(" "),n("div",{staticClass:"editor",attrs:{id:"editor3JS"}},[e._v('\n    const person = { firstName: "John", lastName : "Doe", id : 5566, fullName : function() {\n    return this.firstName + " " + this.lastName; } };\n  ')]),e._v(" "),n("h3",[e._v("Javascript Classes")]),e._v(" "),n("p",[e._v("\n    ECMAScript 2015, also known as ES6, introduced JavaScript Classes. JavaScript Classes are\n    templates for JavaScript Objects.\n  ")]),e._v(" "),n("blockquote",[e._v("\n    A JavaScript class is "),n("strong",[e._v("not")]),e._v(" an object. It is a "),n("strong",[e._v("template")]),e._v(" for\n    JavaScript objects.\n  ")]),e._v(" "),n("p",[e._v("An example of Javascript Class would be:")]),e._v(" "),n("div",{staticClass:"editor",attrs:{id:"editor4JS"}},[e._v('\n    class Person { constructor(id, firstName, lastName) { this.id = id; this.firstName =\n    firstName; this.lastName = lastName; } fullName() { return this.firstName + " " +\n    this.lastName; } } const person1 = new Person(5566, "John", "Doe"); const person2 = new\n    Person(7788, "Walter", "White"); console.log(person1.id); // Will print 5566\n    console.log(person2.id); // Will print 7788 console.log(person1.fullName()); // Will print\n    \'John Doe\' console.log(person2.fullName()); // Will print \'Walter White\'\n  ')]),e._v(" "),n("hr"),e._v(" "),n("h2",[e._v("What is an Event?")]),e._v(" "),n("p",[e._v("\n    Every time that interaction happens with a web document, an event is triggered. The events can\n    be even triggered by a browser or by a user. The javascript syntax is based on the event\n    itself (mouseenter, mousemove, mousedown, mouseup, click, unload, load) with the addition of\n    the prefix 'on' (onmouseenter, onmousemove, onmousedown, onmouseup, onclick, onunload, onload)\n  ")]),e._v(" "),n("h2",[e._v("Event management")]),e._v(" "),n("p",[e._v("The main parts of an event management are:")]),e._v(" "),n("ul",[n("li",[e._v("Handlers")]),e._v(" "),n("li",[e._v("Triggers")]),e._v(" "),n("li",[e._v("Default Handlers")])]),e._v(" "),n("hr"),e._v(" "),n("h3",[e._v("Event Handlers")]),e._v(" "),n("ul",{staticClass:"unstyled"},[n("li",[n("p",[e._v("\n        The event handler is a function that is executed when an event is triggered. This handler\n        should be attached to an HTML element that will be the trigger. Consider the following\n        example:\n      ")]),e._v(" "),n("pre"),e._v(" "),n("div",{staticClass:"editor",attrs:{id:"editor1HTML"}}),e._v(" "),n("div",{staticClass:"editor",attrs:{id:"editor1JS"}}),e._v(" "),n("button",{attrs:{id:"btn1",onclick:"showAlert()"}},[e._v("Click this button")])])]),e._v(" "),n("hr"),e._v(" "),n("h4",[e._v("addEventListener(event, function, boolean)")]),e._v(" "),n("ul",{staticClass:"unstyled"},[n("li",[n("p",[e._v("\n        This method allows you to attach an event to a DOM Node. The first param defines the event\n        type, the second is the function tp be executed, in other words, the event handler, and\n        the third event is a boolean that defines in which event propagation phase should occur.\n      ")]),e._v(" "),n("div",{staticClass:"editor",attrs:{id:"editor2HTML"}}),e._v(" "),n("div",{staticClass:"editor",attrs:{id:"editor2JS"}}),e._v(" "),n("button",{attrs:{id:"btn2"}},[e._v("AddEventListener Example")])])]),e._v(" "),n("h4",[e._v("removeEventListener(event, function, boolean)")]),e._v(" "),n("ul",{staticClass:"unstyled"},[n("li",[n("p",[e._v("\n        This method allows you to dettach an event from a DOM Node. The first param defines the\n        event type, the second is the function tp be executed, in other words, the event handler,\n        and the third event is a boolean that defines in which event propagation phase should\n        occur.\n      ")]),e._v(" "),n("p",[e._v("\n        Is the opposite from the addEventListener, if you click the button below, it will remove\n        the previous event and the button won't listen to the click anymore unless you reload the\n        page.\n      ")]),e._v(" "),n("p",[e._v('Try to click in the button below, and then click on the "AddEventListener Example".')]),e._v(" "),n("button",{attrs:{id:"btn2",onclick:"removeEvent()"}},[e._v('\n        Remove Event from "AddEventListener Example"\n      ')])])])])}],!1,null,null,null);t.default=component.exports}}]);